{"randomArticles":[{"articleTitle":"StringBuilder---构建字符串","articleAbstractText":"\u2003\u2003需要多次有较短的字符串构建字符串时，如果采用字符串连接方式，效率会比较低。每次连接字符串，都要构建一个新的 String 对象，既耗时，又浪费空间。 \u2003\u2003使用 StringBuilder 类型可以解决此问题。 \u2003\u2003eg: 1StringBuilder builder = new StringBuilder(); 2//添加内容时 3builder.append(ch) 4builder.append(str)  \u2003\u2003在需要构建字符串时就调用 toString()方法，接可以得到一个 String 对象。 1String str = builder.toString()  \u2003\u2003StringBuilder 的前身是 StringBuffer，其效率有些低，但允许采用多线程的方式执行添加或删除字符串的操作。如果所有的字符串在一个单线程中编辑，则采用 StringBuilder.","articleStatus":0,"articlePermalink":"/articles/2020/09/21/1600697623101.html","articleImg1URL":"https://b3logfile.com/bing/20190225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"类设计技巧","articleAbstractText":"一定要保证数据私有 一定要对数据初始化 不要在类中使用过多的基本类型 不是所有的域都需要独立的域访问器和域更改器 将职责过多的类进行分解 类名和方法名要能体现它们的职责 优先使用不可变的类","articleStatus":0,"articlePermalink":"/articles/2020/09/23/1600870557493.html","articleImg1URL":"https://b3logfile.com/bing/20180204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot + Swagger Demo","articleAbstractText":"Swagger 是什么？ \u2003\u2003Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTFul 风格的 Web 服务。 Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。 Swagger 的优势 \u2003\u2003　　1. 支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。 \u2003\u2003　　2.提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接。 使用教程 \u2003\u2003在 SpringBoot 中集成 Swagger 是目前的项目主流，这里就展示一个 Demo.  使用 IDEA 创建一个 ....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155700915.html","articleImg1URL":"https://b3logfile.com/file/2020/10/solofetchupload1171756615636502699-811aa617.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"HTTP协议简介","articleAbstractText":"HTTP \u2003\u2003HTTP（HyperText Transfer Protocol，超文本传输协议）是访问万维网使用的核心通信协议，也是今天所有 Web 应用程序使用的通信协议。 \u2003\u2003HTTP 是一种基于消息的模型：客户端发送出一条请求消息，而后由服务器返回一条消息。 HTTP 请求 GET http://www.yanghelong.top/skins/Casper/js/common.min.js?1602727597090 HTTP/1.1 Host: www.yanghelong.top Connection: keep-alive User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36 Accept: */* Referer: http://www.yanghelong.top/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN....","articleStatus":0,"articlePermalink":"/articles/2020/10/21/1603239878487.html","articleImg1URL":"https://b3logfile.com/bing/20171201.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"继承的设计技巧","articleAbstractText":"将公共操作和域放在超类 不要使用受保护的域 ：第一，子类集合是无限制的，任何同一个人都能够由某个类派生一个子类，并编写代码以直接访问 protected 的示例域。从而破坏封装性；第二，在 Java 的程序设计语言中，在同一个包的所有类中都可以访问 protected 域，从未不管它是否为这个类的子类。不过，protected 方法对于指示那些不提供一般用途而在子类中重新定义的方法很有用。 使用继承实现 \u201cis - a\u201d关系 除非所有继承的方法都有意义，否则不要使用继承 在覆盖方法时，不要改变预期的行为 使用多态，而非类型信息 不要过多的使用反射","articleStatus":0,"articlePermalink":"/articles/2020/10/17/1602938103120.html","articleImg1URL":"https://b3logfile.com/bing/20190413.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}