{"relevantArticles":[{"articleTitle":"Interface 接口详解","articleAbstractText":"简介 接口主要用来描述类具有哪些功能，并不给出每个功能的具体实现方式。一个类可以实现一个或多个接口，并在需要接口的地方，随时使用实现了响应接口的对象。 在 Java 程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵循接口描述的统一格式进行定义。 接口中的所有方法自动属于 public，所以在接口中声明方法可以不用提供关键字 public 。 类实现接口，通常有两个步骤：  将类声明为实现指定的接口 对接口中的所有方法进行定义  要将类声明为实现某个接口，需要使用关键字 implements : public interface Comparable{ int compareTo(Object other);} class Employee implements Comparable{}  接口特性 接口不是类，尤其不能使用 new 运算符实例化一个接口。但是可以声明接口的变量，接口变量必须引用实现该接口的类对象。 X = new Comparable(...); //Error Comparable x; // OK x = new Employee(); // OK  ....","articleStatus":0,"articlePermalink":"/articles/2020/10/27/1603809416593.html","articleImg1URL":"file://C:/Users/YHL/Desktop/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/img/%E6%8E%A5%E5%8F%A3/image-20201027204938433.png?lastModify=1603808898?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"继承的设计技巧","articleAbstractText":"将公共操作和域放在超类 不要使用受保护的域 ：第一，子类集合是无限制的，任何同一个人都能够由某个类派生一个子类，并编写代码以直接访问 protected 的示例域。从而破坏封装性；第二，在 Java 的程序设计语言中，在同一个包的所有类中都可以访问 protected 域，从未不管它是否为这个类的子类。不过，protected 方法对于指示那些不提供一般用途而在子类中重新定义的方法很有用。 使用继承实现 \u201cis - a\u201d关系 除非所有继承的方法都有意义，否则不要使用继承 在覆盖方法时，不要改变预期的行为 使用多态，而非类型信息 不要过多的使用反射","articleStatus":0,"articlePermalink":"/articles/2020/10/17/1602938103120.html","articleImg1URL":"https://b3logfile.com/bing/20190413.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring Boot + Swagger Demo","articleAbstractText":"\u2003\u2003 Swagger 是什么？ \u2003\u2003Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTFul 风格的 Web 服务。 Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。 Swagger 的优势 \u2003\u2003　　1. 支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。 \u2003\u2003　　2.提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接。 使用教程 \u2003\u2003在 SpringBoot 中集成 Swagger 是目前的项目主流，这里就展示一个 Demo.  使用 IDEA 创建....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155700915.html","articleImg1URL":"https://b3logfile.com/bing/20200624.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"类设计技巧","articleAbstractText":"一定要保证数据私有 一定要对数据初始化 不要在类中使用过多的基本类型 不是所有的域都需要独立的域访问器和域更改器 将职责过多的类进行分解 类名和方法名要能体现它们的职责 优先使用不可变的类","articleStatus":0,"articlePermalink":"/articles/2020/09/23/1600870557493.html","articleImg1URL":"https://b3logfile.com/bing/20180204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}