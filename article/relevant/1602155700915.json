{"relevantArticles":[{"articleTitle":"类设计技巧","articleAbstractText":"一定要保证数据私有 一定要对数据初始化 不要在类中使用过多的基本类型 不是所有的域都需要独立的域访问器和域更改器 将职责过多的类进行分解 类名和方法名要能体现它们的职责 优先使用不可变的类","articleStatus":0,"articlePermalink":"/articles/2020/09/23/1600870557493.html","articleImg1URL":"https://b3logfile.com/bing/20180204.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"包修饰符","articleAbstractText":"访问权限 类 包 子类 其他包     public V V V V   protect V V V X   default V V X X   private V X X X","articleStatus":0,"articlePermalink":"/articles/2020/09/23/1600870537064.html","articleImg1URL":"https://b3logfile.com/bing/20180427.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"JAVA 杂谈 --- 重载  构造器","articleAbstractText":"\u2003\u2003重载：多个方法具有相同名字，但是有不同参数。 \u2003\u2003编译器根据各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出对应的方法。如果编译找不出匹配的参数，就会产生编译时错误。因此，要完整描述一个方法，必须指出方法名和参数类型，也就是方法签名。 \u2003\u2003注意： 返回类型不是方法签名的一部分。 \u2003\u2003默认域初始化：如果在构造器没有显式地给域赋予初值，那么就会被自动地赋为默认值：数值为 0，布尔值为 false，对象引用为 null。 \u2003\u2003如果在编写一个类时没有编写构造器，那么系统就会提供一个无参构造器。如果类中提供了至少一个构造器，但是没有提供无参构造器，那么系统也不会提供无参构造器。 \u2003\u2003通过重载类的构造方法，可以采用多种形式设置类的示例域的初始状态。 \u2003\u2003如果构造器的第一个语句如 this(...)，那么这个构造器将调用同一个类的另一个构造器。 \u2003\u2003初始化数据域：  在构造器中设置值 在声明中赋值 初始化块  \u2003\u2003无论使用那个构造器构造对象，id 域都在对象初始化块中被初始化。首先运行初始化块，然后才运行构造器的主体部分。 \u2003\u2003调用构造器处理步骤：  所有数据域被初始化为默认值....","articleStatus":0,"articlePermalink":"/articles/2020/09/23/1600870505552.html","articleImg1URL":"https://b3logfile.com/bing/20191008.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"方法参数","articleAbstractText":"\u2003\u2003按值调用： 表示方法接收的是调用者的值。 \u2003\u2003按引用调用：表示方法接收的是调用者提供的变量地址。 \u2003\u2003一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。 \u2003\u2003Java 程序设计语言总是采用按值调用。也就是所，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给他的任何参数变量内容。 \u2003\u2003然而，方法参数共有两种类型：  基本数据类型（数字，布尔值） 对象引用  \u2003\u2003一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不同了。方法得到的是对象引用的拷贝，对象引用和其他的拷贝同时引用同一个对象。 \u2003\u2003 1 基本数据引用  \u2003\u2003 1 对象引用  \u2003\u2003可以看一段代码：  1public class Test {  2 &nbsp; &nbsp;public static void main(String[] args) {  3 &nbsp; &nbsp; &nbsp; &nbsp;Employee a = new Employee(1, \"Alice\");  4 &nbsp; &nbsp; &nbsp; &nbsp;Employee b = new....","articleStatus":0,"articlePermalink":"/articles/2020/09/22/1600784849849.html","articleImg1URL":"https://b3logfile.com/file/2020/09/image20200922221002752-9e55177e.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}