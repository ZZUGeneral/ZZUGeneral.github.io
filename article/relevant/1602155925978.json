{"relevantArticles":[{"articleTitle":"Docker 私有仓库","articleAbstractText":"1. 私有仓库搭建 # 1、拉取私有仓库镜像 docker pull registry # 2、启动私有仓库容器 docker run -id --name=registry -p 5000:5000 registry # 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到{\"repositories\":[]} 表示私有仓库 搭建成功 # 4、修改daemon.json vim /etc/docker/daemon.json # 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip {\"insecure-registries\":[\"私有仓库服务器ip:5000\"]} # 5、重启docker 服务 systemctl restart docker docker start registry 2. 将镜像上传至私有仓库 # 1、标记镜像为私有仓库的镜像 docker tag centos:7 私有仓库服务器IP:5000/centos:7 # 2、上传标记的....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155951338.html","articleImg1URL":"https://b3logfile.com/file/2020/10/solofetchupload1926864103466045231-b6c42656.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Docker部署Mysql, Tomcat, Nginx, Redis","articleAbstractText":"1. MySQL 部署 \u2003\u2003问题及解决方案  容器内的网络和外部机器不能直接通信 外部机器和宿主机可以直接通信 宿主机和容器可以直接通信 当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口撒谎那个。外部机器访问宿主机的该端口，从而间接访问容器的服务。（这种操作称为端口映射）  #搜索mysql镜像 docker search mysql #拉取mysql镜像 docker pull mysql:5.6 #在/root目录下创建mysql目录用于存储mysql数据信息 mkdir ~/mysql cd ~/mysql docker run -id \\ -p 3307:3306 \\ --name=c_mysql \\ -v $pwd/conf:/etc/mysql/conf.d \\ -v $pwd/logs:/logs \\ -v $pwd/data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ mysql:5.6  \u2003\u2003参数说明  -p 3307:3306 ：将容器的 3306 端口映射到宿主机的 3307....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155887721.html","articleImg1URL":"https://b3logfile.com/bing/20180203.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Docker数据卷","articleAbstractText":"1. 数据卷概念 \u2003\u2003数据卷  数据卷是宿主机中的一个目录或文件 当容器目录与数据卷目录绑定后，双方修改会立即同步 一个数据卷可以被多个容器同时挂载 一个容器可以被挂载多个数据卷  \u2003\u2003数据卷作用  容器数据持久化 外部机器和容器间接通信 容器之间数据转换  2. 配置数据卷 \u2003\u2003创建启动容器是，使用 -v 参数，设置数据卷，可以设置多个。 docker run ... -v 宿主机目录：容器内目录 ... eg: docker run -it --name=c1 -v /root/data:/root/data_container centos:7  \u2003\u2003注意事项  目录必须是绝对路径 如果目录不存在，会自动创建 可以挂在多个数据卷  \u2003\u2003通过多个容器挂载同一个数据卷实现容器间通信。 3. 数据卷容器 \u2003\u2003多容器进行数据交换  多个容器挂载同一个数据卷 数据卷容器  \u2003\u2003配置数据卷容器  创建启动数据卷容器，使用 -v 参数设置数据卷  docker run -it --name=c3 -v /volume centos:7 /bin/bash   创建启动 c1 c2 容器，使用 ....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155867208.html","articleImg1URL":"https://b3logfile.com/bing/20180715.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Docker命令","articleAbstractText":"1. 服务相关命令 #启动dokcer服务 systemctl start docker #停止dokcer服务 systemctl stop docker #重启dokcer服务 systemctl restart docker #查看dokcer服务状态 systemctl statuc docker #开机启动dokcer服务 systemctl enable docker  2. docker 镜像相关命令 #查看镜像 docker images #查看所用的镜像ID docker images -q #搜索镜像;从网络中查找所需镜像 docker search redis #拉取镜像(名称：版本号，可在hub.docker.com查看，不指定版本号默认为最新版本) docker pull redis:5.0 #删除镜像(IMAGE ID 或 名称：版本号) docker rmi 7eed8df88d3b 或 docker rmi redis:latest #删除所有的镜像 docker rmi `docker images -q`  3. docker 容器相关命令 #查看容....","articleStatus":0,"articlePermalink":"/articles/2020/10/08/1602155843939.html","articleImg1URL":"https://b3logfile.com/file/2020/10/solofetchupload7393028667612931078-5822e540.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}